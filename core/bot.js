import { InstagramClient } from './instagram-client.js';
import { TelegramBridge } from '../telegram/telegram-bridge.js';
import { ModuleManager } from './module-manager.js';
import { MessageHandler } from './message-handler.js';
import { logger } from '../utils/logger.js';
import { config } from '../config.js';
import { connectDb } from '../utils/db.js';

class HyperInstaBot {
  constructor() {
    this.startTime = new Date();
    this.instagramClient = new InstagramClient();
    this.telegramBridge = config.telegram?.enabled ? new TelegramBridge() : null;
    this.moduleManager = null;
    this.messageHandler = null;
    this.isRunning = false;
  }

  async initialize() {
    try {
      this.showStartupBanner();

      // Initialize database connection
      logger.info('üóÑÔ∏è Connecting to MongoDB...');
      await connectDb();
      logger.info('‚úÖ MongoDB connected');

      // Initialize Instagram client
      logger.info('üì± Initializing Instagram client...');
      await this.instagramClient.initialize();
      logger.info('‚úÖ Instagram client ready');

      // Initialize Telegram bridge if enabled
      if (this.telegramBridge) {
        logger.info('üì® Initializing Telegram bridge...');
        await this.telegramBridge.initialize(this.instagramClient);
        logger.info('‚úÖ Telegram bridge ready');
      }

      // Initialize module manager
      logger.info('üîå Loading modules...');
      this.moduleManager = new ModuleManager(this.instagramClient, this.telegramBridge);
      await this.moduleManager.loadModules();
      logger.info('‚úÖ Modules loaded');

      // Initialize message handler
      logger.info('üì® Setting up message handler...');
      this.messageHandler = new MessageHandler(this.instagramClient, this.moduleManager, this.telegramBridge);
      
      // Connect message handler to Instagram client
      this.instagramClient.on('messageCreate', (message) => {
        this.messageHandler.handleMessage(message);
      });
      
      logger.info('‚úÖ Message handler connected');

      // Setup error handlers
      this.setupErrorHandlers();

      this.isRunning = true;
      logger.info('üöÄ Bot initialization complete!');
      this.showLiveStatus();

    } catch (error) {
      logger.error(`‚ùå Bot initialization failed: ${error.message}`);
      logger.debug(error.stack);
      await this.cleanup();
      process.exit(1);
    }
  }

  setupErrorHandlers() {
    // Instagram client error handlers
    this.instagramClient.on('error', (error) => {
      logger.error('Instagram client error:', error.message);
    });

    this.instagramClient.on('disconnected', () => {
      logger.warn('Instagram client disconnected');
      this.isRunning = false;
    });

    // Telegram bridge error handlers
    if (this.telegramBridge) {
      this.telegramBridge.on('error', (error) => {
        logger.error('Telegram bridge error:', error.message);
      });
    }

    // Process error handlers
    process.on('uncaughtException', (error) => {
      logger.error('Uncaught exception:', error.message);
      logger.debug(error.stack);
    });

    process.on('unhandledRejection', (reason, promise) => {
      logger.error('Unhandled rejection at:', promise, 'reason:', reason);
    });
  }

  showStartupBanner() {
    console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë    üöÄ HYPER INSTA - PROFESSIONAL BOT v2.0                  ‚ïë
‚ïë                                                              ‚ïë
‚ïë    ‚ö° Event-Based ‚Ä¢ üîå Modular ‚Ä¢ üõ°Ô∏è Enterprise Ready      ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);
  }

  showLiveStatus() {
    const uptime = Date.now() - this.startTime;
    console.clear();
    console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë    üöÄ HYPER INSTA - LIVE & OPERATIONAL                     ‚ïë
‚ïë                                                              ‚ïë
‚ïë    ‚úÖ Instagram: Connected & Real-time                      ‚ïë
‚ïë    ${this.telegramBridge?.enabled ? '‚úÖ' : '‚ùå'} Telegram: ${this.telegramBridge?.enabled ? 'Connected & Bridged' : 'Disabled'}                        ‚ïë
‚ïë    üîå Modules: ${this.moduleManager?.modules?.length || 0} Active                                    ‚ïë
‚ïë    ‚ö° Startup Time: ${Math.round(uptime)}ms                                  ‚ïë
‚ïë    üïí Started: ${this.startTime.toLocaleTimeString()}                                ‚ïë
‚ïë                                                              ‚ïë
‚ïë    üéØ Ready for INSTANT event-based processing...          ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üî• Bot is running with PROFESSIONAL architecture!
üí° All features are EVENT-BASED (no polling)
üì± Type .help in Instagram to see all commands
    `);

    // Periodic status updates
    setInterval(() => {
      if (this.isRunning) {
        const stats = this.getStats();
        logger.info(`üíì Bot Status - Messages: ${stats.messages}, Commands: ${stats.commands}, Uptime: ${stats.uptime}`);
      }
    }, 300000); // Every 5 minutes
  }

  getStats() {
    const uptime = Math.floor((Date.now() - this.startTime) / 1000);
    const coreModule = this.moduleManager?.getModule('core');
    
    return {
      messages: coreModule?.messageCount || 0,
      commands: coreModule?.commandCount || 0,
      uptime: `${Math.floor(uptime / 60)}m ${uptime % 60}s`,
      modules: this.moduleManager?.modules?.length || 0,
      isRunning: this.isRunning
    };
  }

  async cleanup() {
    logger.info('üõë Starting graceful shutdown...');
    
    try {
      this.isRunning = false;

      // Cleanup modules
      if (this.moduleManager) {
        await this.moduleManager.cleanup();
      }

      // Cleanup Telegram bridge
      if (this.telegramBridge) {
        await this.telegramBridge.shutdown();
      }

      // Cleanup Instagram client
      if (this.instagramClient) {
        await this.instagramClient.disconnect();
      }

      logger.info('‚úÖ Graceful shutdown complete');
    } catch (error) {
      logger.error('‚ùå Error during cleanup:', error.message);
    }
  }

  async start() {
    await this.initialize();

    // Graceful shutdown handlers
    const shutdownHandler = async (signal) => {
      logger.info(`\nüëã Received ${signal}, shutting down gracefully...`);
      await this.cleanup();
      process.exit(0);
    };

    process.on('SIGINT', () => shutdownHandler('SIGINT'));
    process.on('SIGTERM', () => shutdownHandler('SIGTERM'));
  }
}

// Main execution
async function main() {
  const bot = new HyperInstaBot();
  await bot.start();
}

// Run if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch((error) => {
    console.error('‚ùå Fatal error:', error.message);
    process.exit(1);
  });
}

export { HyperInstaBot };